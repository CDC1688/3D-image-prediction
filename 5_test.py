# -*- coding: utf-8 -*-
"""5.Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N1Es8QgAccfCdZEIbY6J4Q3VrBOMmuKw
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import keras
from keras.layers import Dense, Conv2D, BatchNormalization, Activation
from keras.layers import AveragePooling2D, Input, Flatten
from keras.optimizers import Adam,Adagrad 
from keras.callbacks import ModelCheckpoint, LearningRateScheduler
from keras.callbacks import ReduceLROnPlateau
from sklearn.model_selection import train_test_split
from keras.regularizers import l2
from keras import backend as K
from keras.models import Model
from keras.callbacks import Callback

from keras import models
from keras.layers import core, convolutional, pooling

from keras.applications.resnet_v2 import ResNet50V2
from keras.applications.inception_v3 import InceptionV3
from keras.preprocessing import image
from keras.callbacks import ModelCheckpoint, LearningRateScheduler
from keras.callbacks import ReduceLROnPlateau
from keras.models import Model,Input
from keras.layers import Dense, GlobalAveragePooling2D,Dropout,MaxPooling2D
from keras import backend as K,regularizers
from keras.optimizers import Adam
from keras.models import load_model

import os
import cv2
import json
import glob
import cv2
import matplotlib.pyplot as plt
# %matplotlib inline

# Load the Drive helper and mount
from google.colab import drive

# This will prompt for authorization.
drive.mount('/content/drive')

X = np.load('/content/drive/My Drive/tencent/fil_test.npy')
print(X.shape)
model=load_model('/content/drive/My Drive/tencent/inceptionv3_single.h5',compile=False)

def custom_loss(y_true, y_pred):
    diff = K.sum(K.square(y_pred - y_true))
    bottom=K.sum(K.square(y_true))
    pert= diff/bottom
    return K.sum(pert)

model.compile(optimizer='Adam', loss=custom_loss)
model.summary()

Y_test=model.predict(X, batch_size=None, 
        verbose=0, 
        steps=None, 
        callbacks=None,
        max_queue_size=10, 
        workers=1, 
        use_multiprocessing=False)

y1=pd.DataFrame(Y_test)
print(y1)

y1.to_excel('/content/drive/My Drive/tencent/Y_test_July.xlsx')

path_json='D://dataset//tencent//test//Images.json'

def read_ylabel_test(path):
    with open(path_json,'r') as f:
        data = json.loads(f.read())
        
    Image_data = data["Measurements"]
    Image_list= list(data["Measurements"].keys())
    Field_list=list(data["Measurements"]["Image1"].keys())
    
    return data_out